// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER)
  
  // Relations
  artist        Artist?
  favorites     Favorite[]
  purchases     Purchase[]
  events        EventAttendee[]
  comments      Comment[]
  jestCoins     Int       @default(0)
  
  // Optional fields for user profile
  bio           String?
  location      String?
  website       String?

  streamViews StreamView[]
  streamTickets StreamTicket[]
  payments Payment[]
  careerPlans CareerPlan[]
  
  @@map("users")
}

model Artist {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stageName     String
  genre         String
  bio           String?
  coverImage    String?
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  albums        Album[]
  events        Event[]
  merchandise   Merchandise[]
  demos         Demo[]
  recordings StreamRecording[]
  
  @@map("artists")
}

model Album {
  id            String    @id @default(cuid())
  title         String
  releaseYear   String
  coverImage    String?
  artistId      String
  artist        Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  tracks        Track[]
  
  @@map("albums")
}

model Track {
  id            String    @id @default(cuid())
  title         String
  duration      Int       // Duration in seconds
  audioUrl      String
  albumId       String
  album         Album     @relation(fields: [albumId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("tracks")
}

model Event {
  id            String    @id @default(cuid())
  title         String
  description   String
  date          DateTime
  time          String
  location      String
  isVirtual     Boolean   @default(false)
  streamUrl     String?
  streamKey     String?   // Added for private stream keys
  streamStatus  StreamStatus? @default(SCHEDULED)
  streamPlatform StreamPlatform? // Added to specify the streaming platform
  thumbnailUrl  String?   // Added for stream thumbnails
  price         Float?    // Added for paid streams
  artistId      String
  artist        Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  attendees     EventAttendee[]
  recordings StreamRecording[]

  analytics StreamAnalytics?
  views     StreamView[]
  isPaid   Boolean        @default(false)
  price    Float?
  currency String         @default("USD")
  tickets  StreamTicket[]
  
  @@map("events")
}

model EventAttendee {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId       String
  event         Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  
  @@unique([userId, eventId])
  @@map("event_attendees")
}

model Merchandise {
  id            String    @id @default(cuid())
  name          String
  description   String
  price         Float
  imageUrl      String
  stock         Int       @default(0)
  artistId      String
  artist        Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  purchases     Purchase[]
  
  @@map("merchandise")
}

model Purchase {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  merchandiseId String
  merchandise   Merchandise @relation(fields: [merchandiseId], references: [id], onDelete: Cascade)
  quantity      Int
  totalPrice    Float
  status        PurchaseStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("purchases")
}

model Demo {
  id            String    @id @default(cuid())
  title         String
  description   String
  audioUrl      String
  artistId      String
  artist        Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)
  status        DemoStatus @default(PENDING)
  feedback      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("demos")
}

model Favorite {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  entityType    String    // "artist", "album", "track", etc.
  entityId      String
  createdAt     DateTime  @default(now())
  
  @@unique([userId, entityType, entityId])
  @@map("favorites")
}

model Comment {
  id            String    @id @default(cuid())
  content       String
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  entityType    String    // "artist", "album", "track", etc.
  entityId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("comments")
}

model JestCoinTransaction {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Int
  reason        String
  type          TransactionType
  createdAt     DateTime  @default(now())

  @@map("jestcoin_transactions")
}

model StreamRecording {
  id          String    @id @default(cuid())
  eventId     String
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  artistId    String
  artist      Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)
  title       String
  description String?
  duration    Int?      // Duration in seconds
  fileSize    Int?      // Size in MB
  storageUrl  String?
  status      String    @default("PROCESSING") // PROCESSING, READY, ERROR
  isPublic    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  endedAt     DateTime?
  processedAt DateTime?
  updatedAt   DateTime  @updatedAt

  @@index([eventId])
  @@index([artistId])
}

model StreamAnalytics {
  id           String   @id @default(cuid())
  eventId      String   @unique
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  viewerCount  Int      @default(0)
  peakViewers  Int      @default(0)
  chatMessages Int      @default(0)
  reactions    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([eventId])
}

model StreamView {
  id       String    @id @default(cuid())
  eventId  String
  event    Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId   String?
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  device   String    @default("unknown")
  location String    @default("unknown")
  referrer String    @default("direct")
  duration Int       @default(0)
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  @@index([eventId])
  @@index([userId])
}

model StreamTicket {
  id          String   @id @default(cuid())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  price       Float
  currency    String   @default("USD")
  status      String   @default("PENDING") // PENDING, COMPLETED, CANCELLED, REFUNDED
  purchasedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([eventId])
  @@index([userId])
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float
  currency    String   @default("USD")
  status      String   @default("PENDING") // PENDING, COMPLETED, FAILED, REFUNDED
  method      String   @default("CREDIT_CARD") // CREDIT_CARD, PAYPAL, BANK_TRANSFER, etc.
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model CareerPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  nodes       Json     // Stored as a JSON string
  connections Json     // Stored as a JSON string
  isPublic    Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("career_plans")
}

enum UserRole {
  USER
  ARTIST
  ADMIN
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum DemoStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum StreamStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELLED
}

enum StreamPlatform {
  JESTFLY
  YOUTUBE
  TWITCH
  CUSTOM
}

